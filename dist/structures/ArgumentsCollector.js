"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.ArgumentsCollector=void 0;var _discord=require("discord.js");var _Argument=require("./Argument");var _OptionResolver=require("./OptionResolver");class ArgumentsCollector{constructor(client,options){this.client=client;this.message=options.message;this.language=options.language;this.args=options.args;this.command=options.command;this.cmdArgs=JSON.parse(JSON.stringify(options.command.args));this.isNotDm=options.isNotDm;this.options=[];this.resolved={}}async get(){for(const arg of this.cmdArgs){if([1,2].includes(arg.type))arg.subcommands=this.cmdArgs.filter(sc=>[1,2].includes(sc.type));const argument=new _Argument.Argument(this.client,arg,{isNotDm:this.isNotDm,language:this.language});let result;if(this.args[0]){const invalid=argument.argument.validate(argument,{content:this.args[0],guild:this.message.guild},this.language);if(invalid){result=await argument.collect(this.message,String(invalid))}else{result=argument.argument.get()}}else{result=await argument.collect(this.message,arg.prompt)}if(result==="cancel")return false;if(result==="timelimit"&&argument.required){this.message.reply(this.client.languageFile.ARGS_TIME_LIMIT[this.language]);return false}else if(result==="timelimit"){continue}if(result==="skip")continue;if(this.args[0])this.args.shift();if(typeof result==="object"){this.addArgument({name:result.name,type:argument.type});this.cmdArgs=result.options??[];return this.get()}else{this.addArgument(argument.argument.resolve({name:argument.name,type:argument.type,value:result}))}}}addArgument(argument){var _this$options$;this.addResolved(argument);if(["SUB_COMMAND","SUB_COMMAND_GROUP"].includes(String((_this$options$=this.options[0])===null||_this$options$===void 0?void 0:_this$options$.type))){var _this$options$0$optio;if(!Array.isArray(this.options[0].options))this.options[0].options=[];if(["SUB_COMMAND","SUB_COMMAND_GROUP"].includes(String((_this$options$0$optio=this.options[0].options[0])===null||_this$options$0$optio===void 0?void 0:_this$options$0$optio.type))){if(!Array.isArray(this.options[0].options[0].options))this.options[0].options[0].options=[];return this.options[0].options[0].options.push(argument)}return this.options[0].options.push(argument)}return this.options.push(argument)}resolve(){return new _OptionResolver.OptionResolver(this.client,this.options,this.resolved)}addResolved(argument){if(argument.user){if(!this.resolved.users)this.resolved.users=new _discord.Collection;this.resolved.users.set(argument.user.id,argument.user)}if(argument.member){if(!this.resolved.members)this.resolved.members=new _discord.Collection;this.resolved.members.set(argument.member.id,argument.member)}if(argument.role){if(!this.resolved.roles)this.resolved.roles=new _discord.Collection;this.resolved.roles.set(argument.role.id,argument.role)}if(argument.channel){if(!this.resolved.channels)this.resolved.channels=new _discord.Collection;this.resolved.channels.set(argument.channel.id,argument.channel)}}}exports.ArgumentsCollector=ArgumentsCollector;