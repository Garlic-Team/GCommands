import { Snowflake, PermissionResolvable } from 'discord.js';
import { GCommandsClient } from '../base/GCommandsClient';
import { CommandOptions, CommandArgsOption } from '../typings/interfaces';
import { CommandType, ChannelType } from '../util/Constants';
import { CommandRunOptions } from '../typings/types';
export declare class Command {
    readonly client: GCommandsClient;
    readonly name: string;
    readonly contextMenuName: string;
    readonly description: string;
    readonly type: CommandType[];
    readonly inhibitors: Array<string>;
    readonly cooldown: string;
    readonly args: Array<CommandArgsOption>;
    readonly alwaysObtain: boolean;
    readonly clientRequiredPermissions?: Array<PermissionResolvable>;
    readonly userRequiredPermissions?: Array<PermissionResolvable>;
    readonly userRequiredRoles?: Array<Snowflake>;
    readonly userOnly?: Array<Snowflake>;
    readonly channelTypeOnly?: Array<ChannelType>;
    readonly allowDm?: boolean;
    readonly guildOnly?: Array<Snowflake>;
    readonly nsfw?: boolean;
    readonly aliases?: Array<string>;
    readonly category?: string;
    readonly usage?: string;
    private path;
    constructor(client: GCommandsClient, options: CommandOptions);
    run(options: CommandRunOptions): void;
    reload(): Promise<boolean>;
}
