"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.GCommandsDispatcher=void 0;var _discord=require("discord.js");var ms=_interopRequireWildcard(require("ms"));var _Color=require("../structures/Color");function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap;var cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}class GCommandsDispatcher{constructor(client){this.client=client;this.caseSensitiveCommands=client.options.caseSensitiveCommands;this.inhibitors=new Set;this.cooldowns=new _discord.Collection;this.owners=new _discord.Collection;setImmediate(()=>{this.client.on("ready",()=>{this.fetchOwners()})})}async fetchOwners(){const application=await this.client.application.fetch();if(application.owner===null)return;if(application.owner instanceof _discord.Team){application.owner.members.forEach(member=>this.owners.set(member.user.id,member.user))}else{this.owners.set(application.owner.id,application.owner)}}async getGuildData(guild,options){if(!this.client.database)return;if(guild.data&&!options.force)return guild.data;try{const data=(await this.client.database.get(`guild_${guild.id}`))||{};return data;// eslint-disable-next-line no-useless-return
}catch{return}}async setGuildData(guild,data){if(!this.client.database)return;if(!data)return;try{await this.client.database.set(`guild_${guild.id}`,data);return true;// eslint-disable-next-line no-useless-return
}catch{return}}async setGuildPrefix(guild,prefix){if(!this.client.database)return;if(!prefix)return;try{const data=await guild.getData();data.prefix=prefix;const isSet=await guild.setData(data);return isSet;// eslint-disable-next-line no-useless-return
}catch{return}}async getGuildPrefix(guild,options){var _guild$data;if(!this.client.database)return;if((_guild$data=guild.data)!==null&&_guild$data!==void 0&&_guild$data.prefix&&!options.force)return String(guild.data.prefix);try{const data=await guild.getData({force:true});if(data!==null&&data!==void 0&&data.prefix)return String(data.prefix);// eslint-disable-next-line no-useless-return
}catch{return}}async setGuildLanguage(guild,language){if(!this.client.database)return;if(!language)return;try{const data=await guild.getData();data.language=language;const isSet=await guild.setData(data);return isSet;// eslint-disable-next-line no-useless-return
}catch{return}}async getGuildLanguage(guild,options){var _guild$data2;if(!this.client.database)return;if((_guild$data2=guild.data)!==null&&_guild$data2!==void 0&&_guild$data2.language&&!options.force)return String(guild.data.language);try{const data=await guild.getData({force:true});if(data!==null&&data!==void 0&&data.language)return String(data.language);// eslint-disable-next-line no-useless-return
}catch{return}}async getCooldown(userId,guild,command){if(this.owners.has(userId))return{cooldown:false};const now=Date.now();let cooldown;if(typeof command.cooldown==="string")cooldown=ms(command.cooldown);else cooldown=ms(this.client.options.defaultCooldown);if(cooldown<1800000||!this.client.database){if(!this.cooldowns.has(command.name))this.cooldowns.set(command.name,new _discord.Collection);const timestamps=this.cooldowns.get(command.name);if(timestamps.has(userId)){const expirationTime=timestamps.get(userId);if(Number(now)>Number(expirationTime)){timestamps.delete(userId)}else{const timeLeft=ms(Number(expirationTime)-now);return{cooldown:true,wait:timeLeft}}}timestamps.set(userId,now+cooldown);return{cooldown:false}}else if(this.client.database){var _data$users$userId;const data=await guild.getData();if(!data.users)data.users={};if(!data.users[userId])data.users[userId]={};if(!((_data$users$userId=data.users[userId])!==null&&_data$users$userId!==void 0&&_data$users$userId.cooldowns))data.users[userId].cooldowns={};const cooldowns=data.users[userId].cooldowns;if(cooldowns[command.name]){const expirationTime=cooldowns[command.name];if(now>expirationTime){delete cooldowns[command.name]}else{const timeLeft=ms(expirationTime-now);return{cooldown:true,wait:timeLeft}}}cooldowns[command.name]=now+cooldown;await guild.setData(data);return{cooldown:false}}}addInhibitor(inhibitor){if(typeof inhibitor!=="function")return console.log(new _Color.Color("&d[GCommands] &cThe inhibitor must be a function.").getText());if(this.inhibitors.has(inhibitor))return false;this.inhibitors.add(inhibitor);return true}removeInhibitor(inhibitor){if(typeof inhibitor!=="function")return console.log(new _Color.Color("&d[GCommands] &cThe inhibitor must be a function.").getText());return this.inhibitors.delete(inhibitor)}getCommand(name){let command=this.client.gcommands.get(this.caseSensitiveCommands?name:name.toLowerCase());if(!command){const alias=this.client.galiases.get(this.caseSensitiveCommands?name:name.toLowerCase());if(alias)command=this.client.gcommands.get(alias)}return command}}exports.GCommandsDispatcher=GCommandsDispatcher;